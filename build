#!/bin/bash

red="\033[1;31m"
white="\033[1;37m"

if [ $# != 2 ]; then
	echo "Builder needs 3 parameters :"
	echo " - (1) adress of the git"
	echo " - (2) name of the package"
	#echo " - (3) tag to know where the builder has to copy"
	exit 100
fi

echo "**************************************************"
echo "           Starting package creation             *"
echo "**************************************************"
echo ""

echo "[INFO] Cloning git : $1"
git clone $1
cd $2
rm -rf .git

# *****************************************************************************
echo "[INFO] Check if DEBIAN/ and DEBIAN/control exist"
if [ -d "DEBIAN" ]; then
	cd DEBIAN
	if [ -e "control" ]; then
		cd ..
	else
		echo -e "$red[ERR-200] There is not a file 'control' in DEBIAN/$white"
		cd ../..
		rm -rf $2
		exit 200
	fi
else
	echo -e "$red[ERR-300] There is not a directory 'DEBIAN/'$white"
	cd ..
	rm -rf $2
	exit 300
fi
# *****************************************************************************


# Creating our directories for sources and executables
mkdir -p usr/local/bin
mkdir -p opt/packebian/$2

if [ -e "makefile" ]; then
	echo "[INFO] There is a makefile"
	./build_makefile $2

	# Wrong parameter : need the name of the package
	if [ $? = 101 ]; then
		exit 101
	fi

elif [ -e "pom.xml" ]; then
	echo "[INFO] Maven project"
	./build_maven $2

	# Wrong parameter : need the name of the package
	if [ $? = 102 ]; then
		exit 102
	# There is not a jar in target/
	elif [ $? = 600 ]; then
		exit 600
	fi

elif [ -e "build.xml" ]; then
	echo "[INFO] Ant project"
	./build_ant $2

	# Wrong parameter : need the name of the package
	if [ $? = 103 ]; then
		exit 103
	# There is not a jar in build/jar/
	elif [ $? = 700 ]; then
		exit 700
	fi

elif [ -e "build.gradle" ]; then
	echo "[INFO] Gradle project"
	./build_gradle $2

	# Wrong parameter : need the name of the package
	if [ $? = 104 ]; then
		exit 104
	# There is not a jar in build/libs/
	elif [ $? = 800 ]; then
		exit 800
	fi

elif [ `ls | wc -l` -gt 0 ]; then
	echo "[INFO] There are some files, it will check if there are some executables"
	./build_bin $2

	# Wrong parameter : need the name of the package
	if [ $? = 105 ]; then
		exit 105
	# No executable was found
	elif [ $? = 500 ]; then
		exit 500
	fi

else
	echo -e "$red[ERR-400] Git repository was not build as recommended or the builder is not configured$white"
	cd ..
	rm -rf $2
	exit 400
fi

cd ..
echo "[INFO] Creation of the package"
dpkg-deb --build $2

rm -rf $2

echo ""
echo "**************************************************"
echo "             Ending package creation              *"
echo "**************************************************"
