#!/bin/bash

red="\033[1;31m"
white="\033[1;37m"

REPOSITORY=
PACKAGE=
TAG=

# Remove the first dash of options
while getopts ":-:" dash; do
	# IPS : shell separator
	# Split option and argument
	while IFS="=" read option arg; do
		case $option in
			repository) REPOSITORY=$arg ;;
			package) PACKAGE=$arg ;;
			tag) TAG=$arg ;;
		esac
	# It has to take 'option=argument' as entry
	done < <( echo "$OPTARG" )
done

if [ -z "$REPOSITORY" -o -z "$PACKAGE" -o -z "$TAG" ]; then
	echo "Builder needs 3 parameters :"
	echo " --repository : adress of the git"
	echo " --package : name of the package"
	echo " --tag : tag to know where the builder has to copy"
	exit 100
fi


echo "**************************************************"
echo "           Starting package creation             *"
echo "**************************************************"
echo ""

echo "[INFO] Cloning git : $REPOSITORY"
git clone $REPOSITORY
cd $PACKAGE
rm -rf .git

# *****************************************************************************
echo "[INFO] Check if DEBIAN/ and DEBIAN/control exist"
if [ -d DEBIAN ]; then
	cd DEBIAN
	if [ -e control ]; then
		cd ..
	else
		echo -e "$red[ERR-200] There is not a file 'control' in DEBIAN/$white"
		cd ../..
		rm -rf $PACKAGE
		exit 200
	fi
else
	echo -e "$red[ERR-300] There is not a directory 'DEBIAN/'$white"
	cd ..
	rm -rf $PACKAGE
	exit 300
fi

echo "[INFO] Check if there are not directories named opt/ and usr/"
if [ -d opt ]; then
	echo -e "$red[ERR-900] The project cannot have a directory opt/$white"
	exit 900
fi
if [ -d usr ]; then
	echo -e "$red[ERR-901] The project cannot have a directory usr/$white"
	exit 901
fi
# *****************************************************************************


# Creating our directories for sources and executables
mkdir -p usr/local/bin
mkdir -p opt/packebian/$PACKAGE

if [ -e makefile ]; then
	echo "[INFO] There is a makefile"
	../build_makefile $PACKAGE

	# 101 -> Wrong parameter : need the name of the package
	if [ $? = 101 ]; then
		err=$?
		cd ..
        	rm -rf $PACKAGE
		exit err
	fi

elif [ -e pom.xml ]; then
	echo "[INFO] Maven project"
	../build_maven $PACKAGE

	# 102 -> Wrong parameter : need the name of the package
	# 600 -> There is not a jar in target/
	if [ $? = 102 -o $? = 600 ]; then
		err=$?
		cd ..
        	rm -rf $PACKAGE
		exit err
	fi

elif [ -e build.xml ]; then
	echo "[INFO] Ant project"
	../build_ant $PACKAGE

	# 103 -> Wrong parameter : need the name of the package
	# 700 -> There is not a jar in build/jar/
	if [ $? = 103 -o $? = 700 ]; then
		err=$?
		cd ..
        	rm -rf $PACKAGE
		exit err
	fi

elif [ -e build.gradle ]; then
	echo "[INFO] Gradle project"
	../build_gradle $PACKAGE

	# 104 -> Wrong parameter : need the name of the package
	# 800 -> There is not a jar in build/libs/
	if [ $? = 104 -o $? = 800 ]; then
		err=$?
		cd ..
        	rm -rf $PACKAGE
		exit err
	fi

elif [ `ls | wc -l` -gt 0 ]; then
	echo "[INFO] There are some files, it will check if there are some executables"
	../build_bin $PACKAGE

	# 105 -> Wrong parameter : need the name of the package
	# 500 -> No executable was found
	if [ $? = 105 -o $? = 500 ]; then
		err=$?
		cd ..
        	rm -rf $PACKAGE
		exit err
	fi

else
	echo -e "$red[ERR-400] Git repository was not build as recommended or the builder is not configured$white"
	cd ..
	rm -rf $PACKAGE
	exit 400
fi

cd ..
echo "[INFO] Creation of the package"
dpkg-deb --build $PACKAGE

rm -rf $PACKAGE

echo ""
echo "**************************************************"
echo "             Ending package creation             *"
echo "**************************************************"

exit 0
