#!/bin/bash

red="\033[1;31m"
white="\033[1;37m"

REPOSITORY=
PACKAGE=
TAG=

SCRIPTS=`ls scripts/ | wc -l`

# Remove the first dash of options
while getopts ":-:" dash; do
	# IPS : shell separator
	# Split option and argument
	while IFS="=" read option arg; do
		case $option in
			repository) REPOSITORY=$arg ;;
			package) PACKAGE=$arg ;;
			tag) TAG=$arg ;;
		esac
	# It has to take 'option=argument' as entry
	done < <( echo "$OPTARG" )
done

if [ -z "$REPOSITORY" -o -z "$PACKAGE" -o -z "$TAG" ]; then
	echo "Builder needs 3 parameters :"
	echo " --repository : adress of the git"
	echo " --package : name of the package"
	echo " --tag : tag to know where the builder has to copy"
	exit 200
fi


echo "**************************************************"
echo "           Starting package creation             *"
echo "**************************************************"
echo ""

echo "[INFO] Cloning git : $REPOSITORY"
git clone $REPOSITORY
cd $PACKAGE
rm -rf .git

# *****************************************************************************
echo "[INFO] Check if DEBIAN/ and DEBIAN/control exist"
if [ -d DEBIAN ]; then
	cd DEBIAN
	if [ -e control ]; then
		cd ..
	else
		echo -e "$red[ERR-200] There is not a file 'control' in DEBIAN/$white"
		cd ../..
		rm -rf $PACKAGE
		exit 301
	fi
else
	echo -e "$red[ERR-300] There is not a directory 'DEBIAN/'$white"
	cd ..
	rm -rf $PACKAGE
	exit 302
fi

echo "[INFO] Check if there are not directories named opt/ and usr/"
if [ -d opt ]; then
	echo -e "$red[ERR-900] The project cannot have a directory opt/$white"
	exit 401
fi
if [ -d usr ]; then
	echo -e "$red[ERR-901] The project cannot have a directory usr/$white"
	exit 402
fi
# *****************************************************************************


# Creating our directories for sources and executables
mkdir -p usr/local/bin
mkdir -p opt/packebian/$PACKAGE

cpt=0
for file in ../scripts/*; do
	$file $PACKAGE $TAG
	err=$?
	cpt=$cpt+1
	if [ $err = 0 ]; then
		break
	elif [ $err != 50 ]; then
		exit $err
	elif [ $cpt = $SCRIPTS ]; then
		echo -e "$red[ERR-100] Git repository was not build as recommended or the builder is not configured$white"
		cd ..
		rm -rf $PACKAGE
		exit 100
	fi
done

cd ..
echo "[INFO] Creation of the package"
dpkg-deb --build $PACKAGE

rm -rf $PACKAGE

echo ""
echo "**************************************************"
echo "             Ending package creation             *"
echo "**************************************************"

exit 0
